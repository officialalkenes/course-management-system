# tests/test_views.py
import pytest
from django.urls import reverse
from rest_framework import status
from faker import Faker

fake = Faker()

@pytest.mark.django_db
def test_teacher_onboarding_view(teacher_client, teacher_user):
    """Test teacher onboarding endpoint"""
    url = reverse('onboarding-teacher')
    data = {
        'bio': fake.text(),
        'qualifications': 'PhD, MSc',
        'specialization': 'Computer Science',
        'years_of_experience': 8,
        'institution': 'Tech University',
        'department': 'Computer Science'
    }

    response = teacher_client.post(url, data, format='json')
    assert response.status_code == status.HTTP_200_OK

    # Verify profile was updated
    teacher_user.refresh_from_db()
    assert teacher_user.teacher_profile.onboarding_completed is True
    assert teacher_user.teacher_profile.specialization == 'Computer Science'

@pytest.mark.django_db
def test_student_onboarding_view(student_client, student_user):
    """Test student onboarding endpoint"""
    url = reverse('onboarding-student')
    data = {
        'student_id': 'STU2023001',
        'date_of_birth': '2005-05-15',
        'grade_level': '10',
        'parent_guardian_name': fake.name(),
        'parent_guardian_contact': '+1234567890',
        'school_name': 'High School',
        'academic_interests': 'Programming, Robotics'
    }

    response = student_client.post(url, data, format='json')
    assert response.status_code == status.HTTP_200_OK

    # Verify profile was updated
    student_user.refresh_from_db()
    assert student_user.student_profile.onboarding_completed is True
    assert student_user.student_profile.student_id == 'STU2023001'

@pytest.mark.django_db
def test_onboarding_wrong_user_type(teacher_client, student_client):
    """Test that users can't complete onboarding for wrong role"""
    teacher_url = reverse('onboarding-teacher')
    student_url = reverse('onboarding-student')

    # Teacher trying to complete student onboarding
    response = teacher_client.post(student_url, {}, format='json')
    assert response.status_code == status.HTTP_403_FORBIDDEN

    # Student trying to complete teacher onboarding
    response = student_client.post(teacher_url, {}, format='json')
    assert response.status_code == status.HTTP_403_FORBIDDEN

@pytest.mark.django_db
def test_onboarding_required_fields(teacher_client, teacher_user):
    """Test that required fields are enforced"""
    url = reverse('onboarding-teacher')
    incomplete_data = {
        'qualifications': 'PhD',
        'specialization': 'Physics'
        # Missing bio (required)
    }

    response = teacher_client.post(url, incomplete_data, format='json')
    assert response.status_code == status.HTTP_400_BAD_REQUEST
    assert 'bio' in response.data
